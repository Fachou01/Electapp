// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url=env("DATABASE_URL")
}

model Admin {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now()) 
  updatedAt DateTime @updatedAt
  name String
  email String @unique
  password String
  elections Election[]
}

model Voter {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name String
  email String @unique
  password String
  ballots Ballot[]
  responses Response[]
}

model Election {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
  title String
  description String?
  status ElectionStatus
  startDate DateTime @default(now())
  endDate DateTime
  admin Admin @relation(fields: [adminId],references: [id])
  adminId Int
  ballots Ballot[]
  questions Question[]
}

model Ballot {
  id Int @default(autoincrement())
  assignedAt DateTime @default(now())
  election Election @relation(fields: [electionId],references: [id])
  electionId Int
  voter Voter @relation(fields: [voterId],references: [id])
  voterId Int
  status BallotStatus
  @@id([id,electionId, voterId])
}

model Question {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
  title String
  description String?
  suggestions Suggestion[]
  election Election @relation(fields: [electionId],references: [id])
  electionId Int
}

model Suggestion {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
  title String
  description String?
  question Question @relation(fields: [questionId],references: [id],onDelete: Cascade)
  questionId Int
  responses Response[]  
}

model Response {
  id Int  @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
  voter Voter @relation(fields: [voterId],references: [id])
  voterId Int
  suggestion Suggestion @relation(fields: [suggestionId],references: [id])
  suggestionId Int

  @@id([id,voterId,suggestionId])
}

enum BallotStatus {
  SUBMITTED
  PENDING
}

enum ElectionStatus {
  STARTED
  PENDING
}